#!/usr/bin/env node

const metrics = require('commander');
const clientCollector = require('./lib/clientMetrics');
const serverCollector = require('./lib/serverMetrics');
const bundleCollector = require('./lib/bundleMetrics');
const table = require('markdown-table');

metrics
    .version('1.7.0')
    .option('--chromiumPath [chromiumPath]', 'Chromium path for puppeteer')
    .option('--ignoreHTTPSErrors', 'Ignore HTTPS errors with puppeteer when true')
    .option('--control [control]', 'Specify the URL to be used as the control to compare against')
    .option('--controlBundleMetricsUrl [controlBundleMetricsUrl]', 'Specify the URL to get to the bundle metrics for the control')
    .option('--prBundleMetricsUrl [prBundleMetricsUrl]', 'Specify the URL to get to the bundle metrics for the pr')
    .option('--pr [pr]', 'Specify the URL to be used to compare the control to')
    .parse(process.argv);

if (!process.argv.slice(2).length) {
    metrics.outputHelp();
}

const tableHeader = [['Metric',
                      'Desktop Control',
                      'Desktop PR',
                      'Desktop ∆',
                      'Mobile Control',
                      'Mobile PR',
                      'Mobile ∆']];

let metricsCollectors; 
if (metrics.prBundleMetricsUrl || metrics.controlBundleMetricsUrl) {
    metricsCollectors = [clientCollector, serverCollector, bundleCollector];
} else {
    metricsCollectors = [clientCollector, serverCollector];
}

async function printMarkdownTable(controlUrl, prUrl, options) {
    let formattedTables = metricsCollectors.map(async (collector) => {
        let control;
        let pr;

        if (collector === bundleCollector) {
            control = await collector.collect(options['controlBundleMetricsUrl'], options);
            pr = await collector.collect(options['prBundleMetricsUrl'], options)
        } else {
            control = await collector.collect(controlUrl, options);
            pr = await collector.collect(prUrl, options);
        }

        return collector.formatTable(control, pr);
    });

    formattedTables = await Promise.all(formattedTables);

    console.log(table([].concat.apply(tableHeader, formattedTables)));
}

printMarkdownTable(metrics.control,
                   metrics.pr,
                   {controlBundleMetricsUrl: metrics.controlBundleMetricsUrl,
                    prBundleMetricsUrl: metrics.prBundleMetricsUrl,
                    executablePath: metrics.chromiumPath,
                    ignoreHTTPSErrors: metrics.ignoreHTTPSErrors});
